{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Generate","text":"<p>A Python Package to Access World-Class Generative Models.</p> <pre><code>from generate import OpenAIChat, MinimaxChat\n\nOpenAIChat().generate('Hello\uff0cWorld!')\nMinimaxChat().generate('Hello\uff0cWorld!')\n</code></pre>"},{"location":"#_1","title":"\u7b80\u4ecb","text":"<p>Generate \u5141\u8bb8\u7528\u6237\u901a\u8fc7\u7edf\u4e00\u7684 api \u8bbf\u95ee\u591a\u5e73\u53f0\u7684\u751f\u6210\u5f0f\u6a21\u578b\uff0c\u5f53\u524d\u652f\u6301\uff1a</p> \u5e73\u53f0 \ud83e\udd16 \u540c\u6b65 \ud83d\udd04 \u5f02\u6b65 \u23f3 \u6d41\u5f0f \ud83c\udf0a Vision \ud83d\udc40 Tools \ud83d\udee0\ufe0f OpenAI \u2705 \u2705 \u2705 \u2705 \u2705 Azure \u2705 \u2705 \u274c \u2705 \u2705 Anthropic \u2705 \u2705 \u2705 \u2705 \u274c \u6587\u5fc3 Wenxin \u2705 \u2705 \u2705 \u274c \u2705 \u767e\u70bc Bailian \u2705 \u2705 \u2705 \u274c \u274c \u7075\u79ef DashScope \u2705 \u2705 \u2705 \u2705 \u274c \u767e\u5ddd\u667a\u80fd Baichuan \u2705 \u2705 \u2705 \u274c \u274c Minimax \u2705 \u2705 \u2705 \u274c \u2705 \u6df7\u5143 Hunyuan \u2705 \u2705 \u2705 \u274c \u2705 \u667a\u8c31 Zhipu \u2705 \u2705 \u2705 \u2705 \u2705 \u6708\u4e4b\u6697\u9762 Moonshot \u2705 \u2705 \u2705 \u274c \u274c DeepSeek \u2705 \u2705 \u2705 \u274c \u274c \u96f6\u4e00\u4e07\u7269 Yi \u2705 \u2705 \u2705 \u274c \u274c"},{"location":"#features","title":"Features","text":"<ul> <li>\u591a\u6a21\u6001\uff0c\u652f\u6301\u6587\u672c\u751f\u6210\uff0c\u591a\u6a21\u6001\u6587\u672c\u751f\u6210\uff0c\u7ed3\u6784\u4f53\u751f\u6210\uff0c\u56fe\u50cf\u751f\u6210\uff0c\u8bed\u97f3\u751f\u6210...</li> <li>\u8de8\u5e73\u53f0\uff0c\u652f\u6301 OpenAI\uff0cAzure\uff0cMinimax\uff0c\u667a\u8c31\uff0c\u6708\u4e4b\u6697\u9762\uff0c\u6587\u5fc3\u4e00\u8a00 \u5728\u5185\u7684\u56fd\u5185\u5916 10+ \u5e73\u53f0</li> <li>One API\uff0c\u7edf\u4e00\u4e86\u4e0d\u540c\u5e73\u53f0\u7684\u6d88\u606f\u683c\u5f0f\uff0c\u63a8\u7406\u53c2\u6570\uff0c\u63a5\u53e3\u5c01\u88c5\uff0c\u8fd4\u56de\u89e3\u6790\uff0c\u8ba9\u7528\u6237\u65e0\u9700\u5173\u5fc3\u4e0d\u540c\u5e73\u53f0\u7684\u5dee\u5f02</li> <li>\u5f02\u6b65\uff0c\u6d41\u5f0f\u548c\u5e76\u53d1\uff0c\u63d0\u4f9b\u6d41\u5f0f\u8c03\u7528\uff0c\u975e\u6d41\u5f0f\u8c03\u7528\uff0c\u540c\u6b65\u8c03\u7528\uff0c\u5f02\u6b65\u8c03\u7528\uff0c\u5f02\u6b65\u6279\u91cf\u5e76\u53d1\u8c03\u7528\uff0c\u9002\u914d\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f</li> <li>\u81ea\u5e26\u7535\u6c60\uff0c\u63d0\u4f9b chainlit UI\uff0c\u8f93\u5165\u68c0\u67e5\uff0c\u53c2\u6570\u68c0\u67e5\uff0c\u8ba1\u8d39\uff0c\u901f\u7387\u63a7\u5236\uff0cAgent, Tool call \u7b49</li> <li>\u8f7b\u91cf\uff0c\u6700\u5c0f\u5316\u4f9d\u8d56\uff0c\u4e0d\u540c\u5e73\u53f0\u7684\u8bf7\u6c42\u548c\u9274\u6743\u903b\u8f91\u5747\u4e3a\u539f\u751f\u5185\u7f6e\u529f\u80fd</li> <li>\u9ad8\u8d28\u91cf\u4ee3\u7801\uff0c100% typehints\uff0cpylance strict, ruff lint &amp; format,  test coverage &gt; 85% ...</li> </ul>"},{"location":"#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install generate-core\n</code></pre>"},{"location":"#_3","title":"\u5bf9\u8bdd\u6a21\u578b","text":""},{"location":"#_4","title":"\u67e5\u770b\u6a21\u578b\u5217\u8868","text":"<pre><code>from generate.chat_completion import ChatModelRegistry\n\nprint('\\n'.join([model_cls.__name__ for model_cls, _ in ChatModelRegistry.values()]))\n\n# ----- Output -----\nAzureChat\nAnthropicChat\nOpenAIChat\nMinimaxProChat\nMinimaxChat\nZhipuChat\nZhipuCharacterChat\nWenxinChat\nHunyuanChat\nBaichuanChat\nBailianChat\nDashScopeChat\nDashScopeMultiModalChat\nMoonshotChat\nDeepSeekChat\nYiChat\n</code></pre>"},{"location":"#api","title":"\u914d\u7f6e\u6a21\u578b API","text":"<pre><code>from generate import WenxinChat\n\n# \u83b7\u53d6\u5982\u4f55\u914d\u7f6e\u6587\u5fc3\u4e00\u8a00\uff0c\u5176\u4ed6\u6a21\u578b\u540c\u7406\nprint(WenxinChat.how_to_settings())\n\n# ----- Output -----\nWenxinChat Settings\n\n# Platform\nQianfan\n\n# Required Environment Variables\n['QIANFAN_API_KEY', 'QIANFAN_SECRET_KEY']\n\n# Optional Environment Variables\n['QIANFAN_PLATFORM_URL', 'QIANFAN_COMLPETION_API_BASE', 'QIANFAN_IMAGE_GENERATION_API_BASE', 'QIANFAN_ACCESS_TOKEN_API']\n\nYou can get more information from this link: https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Dlkm79mnx\n\ntips: You can also set these variables in the .env file, and generate will automatically load them.\n</code></pre>"},{"location":"#_5","title":"\u6587\u672c\u751f\u6210","text":"<pre><code>from generate import OpenAIChat\n\nmodel = OpenAIChat()\nmodel.generate('\u4f60\u597d\uff0cGPT\uff01', temperature=0, seed=2023)\n\n# ----- Output -----\nChatCompletionOutput(\n    model_info=ModelInfo(task='chat_completion', type='openai', name='gpt-3.5-turbo-0613'),\n    cost=0.000343,\n    extra={'usage': {'prompt_tokens': 13, 'completion_tokens': 18, 'total_tokens': 31}},\n    message=AssistantMessage(\n        role='assistant',\n        name=None,\n        content='\u4f60\u597d\uff01\u6709\u4ec0\u4e48\u6211\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7684\u5417\uff1f',\n        function_call=None,\n        tool_calls=None\n    ),\n    finish_reason='stop'\n)\n</code></pre>"},{"location":"#_6","title":"\u591a\u6a21\u6001\u6587\u672c\u751f\u6210","text":"<pre><code>from generate import OpenAIChat\n\nmodel = OpenAIChat(model='gpt-4-vision-preview')\nuser_message = {\n    'role': 'user',\n    'content': [\n        {'text': '\u8fd9\u4e2a\u56fe\u7247\u662f\u54ea\u91cc\uff1f'},\n        {'image_url': {'url': 'https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg'}},\n    ],\n}\nmodel.generate(user_message, max_tokens=1000)\n\n# ----- Output -----\nChatCompletionOutput(\n    model_info=ModelInfo(task='chat_completion', type='openai', name='gpt-4-1106-vision-preview'),\n    cost=0.10339000000000001,\n    extra={'usage': {'prompt_tokens': 1120, 'completion_tokens': 119, 'total_tokens': 1239}},\n    message=AssistantMessage(\n        role='assistant',\n        name=None,\n        content='\u8fd9\u5f20\u56fe\u7247\u663e\u793a\u7684\u662f\u4e00\u540d\u5973\u58eb\u548c\u4e00\u53ea\u72d7\u5728\u6c99\u6ee9\u4e0a\u3002\u4ed6\u4eec\u4f3c\u4e4e\u5728\u4eab\u53d7\u65e5\u843d\u65f6\u5206\u7684\u5b81\u9759\u65f6\u523b',\n        function_call=None,\n        tool_calls=None\n    ),\n    finish_reason='stop'\n)\n</code></pre>"},{"location":"#_7","title":"\u591a\u79cd\u8c03\u7528\u65b9\u5f0f","text":"<pre><code>from generate import OpenAIChat\n\nmodel = OpenAIChat()\nfor stream_output in model.stream_generate('\u4ecb\u7ecd\u4e00\u4e0b\u5510\u671d'):\n    print(stream_output.stream.delta, end='', flush=True)\n\n# \u540c\u6b65\u8c03\u7528\uff0cmodel.generate\n# \u5f02\u6b65\u8c03\u7528\uff0cmodel.async_generate\n# \u6d41\u5f0f\u8c03\u7528\uff0cmodel.stream_generate\n# \u5f02\u6b65\u6d41\u5f0f\u8c03\u7528\uff0cmodel.async_stream_generate\n# \u6279\u91cf\u8c03\u7814\uff0cmodel.batch_generate\n# \u5f02\u6b65\u6279\u91cf\u8c03\u7528\uff0cmodel.async_batch_generate\n</code></pre>"},{"location":"#_8","title":"\u6d3e\u751f\u529f\u80fd","text":""},{"location":"#_9","title":"\u7ed3\u6784\u4f53\u751f\u6210","text":"<pre><code>from generate import OpenAIChat\nfrom pydantic import BaseModel\n\nclass Country(BaseModel):\n    name: str\n    capital: str\n\nmodel = OpenAIChat().structure(output_structure_type=Country)\nmodel.generate('Paris is the capital of France and also the largest city in the country.')\n# ----- Output -----\nStructureModelOutput(\n    model_info=ModelInfo(task='chat_completion', type='openai', name='gpt-3.5-turbo-0613'),\n    cost=0.000693,\n    extra={'usage': {'prompt_tokens': 75, 'completion_tokens': 12, 'total_tokens': 87}},\n    structure=Country(name='France', capital='Paris')\n)\n</code></pre>"},{"location":"#_10","title":"\u901f\u7387\u9650\u5236","text":"<pre><code>import time\nfrom generate import OpenAIChat\n\n# \u9650\u5236\u901f\u7387\uff0c\u6bcf 10 \u79d2\u6700\u591a 4 \u6b21\u8bf7\u6c42\nlimit_model = OpenAIChat().limit(max_generates_per_time_window=2, num_seconds_in_time_window=10)\nstart_time = time.time()\nfor i in limit_model.batch_generate([f'1 + {i} = ?' for i in range(4)]):\n    print(i.reply)\n    print(f'elapsed time: {time.time() - start_time:.2f} seconds')\n\n# ----- Output -----\n1\nelapsed time: 0.70 seconds\n2\nelapsed time: 1.34 seconds\n3\nelapsed time: 11.47 seconds\n4\nelapsed time: 12.15 seconds\n</code></pre>"},{"location":"#_11","title":"\u5bf9\u8bdd\u5386\u53f2\u4fdd\u6301","text":"<pre><code>from generate import OpenAIChat\n\nsession_model = OpenAIChat().session()\nsession_model.generate('i am bob')\nprint(session_model.generate('What is my name?').reply)\n\n# ----- Output -----\nYour name is Bob.\n</code></pre>"},{"location":"#_12","title":"\u5de5\u5177\u8c03\u7528","text":"<pre><code>from generate import OpenAIChat, tool\n\n@tool\ndef get_weather(location: str) -&gt; str:\n    return f'{location}, 27\u00b0C, Sunny'\n\nagent = OpenAIChat().agent(tools=get_weather)\nprint(agent.generate('what is the weather in Beijing?').reply)\n\n# ----- Output -----\nThe weather in Beijing is currently 27\u00b0C and sunny.\n</code></pre>"},{"location":"#_13","title":"\u56fe\u50cf\u751f\u6210\u6a21\u578b","text":"<pre><code>from generate import OpenAIImageGeneration\n\nmodel = OpenAIImageGeneration()\nmodel.generate('black hole')\n\n# ----- Output -----\nImageGenerationOutput(\n    model_info=ModelInfo(task='image_generation', type='openai', name='dall-e-3'),\n    cost=0.56,\n    extra={},\n    images=[\n        GeneratedImage(\n            url='https://oaidalleapiprodscus.blob.core.windows.net/...',\n            prompt='Visualize an astronomical illustration featuring a black hole at its core. The black hole \nshould be portrayed with strong gravitational lensing effect that distorts the light around it. Include a \nsurrounding accretion disk, glowing brightly with blue and white hues, streaked with shades of red and orange, \nindicating heat and intense energy. The cosmos in the background should be filled with distant stars, galaxies, and\nnebulas, illuminating the vast, infinite space with specks of light.',\n            image_format='png',\n            content=b'&lt;image bytes&gt;'\n        )\n    ]\n)\n</code></pre>"},{"location":"#_14","title":"\u8bed\u97f3\u751f\u6210\u6a21\u578b","text":"<pre><code>from generate import MinimaxSpeech\n\nmodel = MinimaxSpeech()\nmodel.generate('\u4f60\u597d\uff0c\u4e16\u754c\uff01')\n\n# ----- Output -----\nTextToSpeechOutput(\n    model_info=ModelInfo(task='text_to_speech', type='minimax', name='speech-01'),\n    cost=0.01,\n    extra={},\n    audio=b'&lt;audio bytes&gt;',\n    audio_format='mp3'\n)\n</code></pre>"},{"location":"#ui","title":"UI","text":"<pre><code>python -m generate.ui\n# help\n# python -m generate.ui --help\n</code></pre>"}]}